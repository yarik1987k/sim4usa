/****************
 * Fonts
 ****************/
/****************
 * Paints
 ****************/
/****************
 * Effects
 ****************/
/****************
 * Grid Settings
 ****************/
.block-tabs {
  overflow: hidden;
}

.tabs__link-list {
  overflow-x: auto;
  margin: 0 0 1.25rem !important;
  white-space: nowrap;
}
.tabs__link-list::before, .tabs__link-list::after {
  content: "";
  display: table;
}
.tabs__link-list::after {
  clear: both;
}
@media (min-width: 48rem) {
  .tabs__link-list {
    padding: 0 !important;
    margin: 0 0 1.75rem !important;
  }
}
.tabs__link-list li {
  margin-bottom: 0.25rem !important;
}
.tabs__link-list li::before {
  content: none !important;
}
.tabs__link-list-wrapper {
  position: relative;
}
.tabs__link-list-wrapper.has-scroll::before {
  display: block;
}
.tabs__link {
  font-size: 0.9375rem;
  font-weight: 700;
  margin: 0;
  display: inline-block;
  float: none;
  border-bottom: 1px solid #e1e1e1;
}
.tabs__link a {
  font-weight: 600;
  font-size: clamp(0.875rem, 0.7254672897rem + 0.3115264798vw, 1rem);
  line-height: clamp(1rem, 0.4018691589rem + 1.246105919vw, 1.5rem);
  position: relative;
  color: #333333;
  display: block;
  padding: 0.75rem 1.25rem;
  transition: color 0.2s linear;
  text-align: center;
  text-decoration: none;
}
@media (min-width: 36rem) {
  .tabs__link a {
    min-width: 12.5rem;
  }
}
.tabs__link a:hover {
  background-color: #f7f7f7;
}
.tabs__link a:focus, .tabs__link a:hover {
  color: inherit;
}
.tabs__link a::after {
  position: absolute;
  right: auto;
  bottom: -0.0625rem;
  left: 0;
  display: block;
  width: 0;
  height: 0.125rem;
  content: "";
  transition: all 0.2s linear;
  background-color: #ffeabd;
}
.tabs__link.active a::after {
  width: 100%;
}
.tabs__tab-content {
  position: static;
  visibility: visible;
  transition: opacity 0.2s linear;
  opacity: 1;
}
.tabs__tab-content:not(.active) {
  position: absolute;
  visibility: hidden;
  opacity: 0;
  left: -624.9375rem;
}
.tabs__divider {
  background: #b3b3b3;
  height: 0.0625rem;
  font-size: 0;
  overflow: hidden;
  margin-top: 2.9375rem;
}
@media (min-width: 48rem) {
  .tabs__divider {
    margin-top: 4.9375rem;
  }
}

.tab-head-wrap {
  position: relative;
}
@media (max-width: 47.98rem) {
  .tab-head-wrap {
    margin: 0 -1.25rem;
  }
  .tab-head-wrap .tab-head::before, .tab-head-wrap .tab-head::after {
    content: "";
    display: table;
  }
  .tab-head-wrap .tab-head::after {
    clear: both;
  }
}
.tab-head-wrap.has-scroll::after {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  display: block;
  width: 4.375rem;
  content: "";
  background-image: linear-gradient(270deg, #f7f7f7 0%, rgba(247, 247, 247, 0) 100%);
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
